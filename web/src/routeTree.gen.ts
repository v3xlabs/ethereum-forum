/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SIndexImport } from './routes/s/index'
import { Route as RIndexImport } from './routes/r/index'
import { Route as CIndexImport } from './routes/c/index'
import { Route as ChatChatIdImport } from './routes/chat/$chatId'
import { Route as UUserIdIndexImport } from './routes/u/$userId/index'
import { Route as TTopicIdIndexImport } from './routes/t/$topicId/index'
import { Route as PmIssueIdIndexImport } from './routes/pm/$issueId/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SIndexRoute = SIndexImport.update({
  id: '/s/',
  path: '/s/',
  getParentRoute: () => rootRoute,
} as any)

const RIndexRoute = RIndexImport.update({
  id: '/r/',
  path: '/r/',
  getParentRoute: () => rootRoute,
} as any)

const CIndexRoute = CIndexImport.update({
  id: '/c/',
  path: '/c/',
  getParentRoute: () => rootRoute,
} as any)

const ChatChatIdRoute = ChatChatIdImport.update({
  id: '/chat/$chatId',
  path: '/chat/$chatId',
  getParentRoute: () => rootRoute,
} as any)

const UUserIdIndexRoute = UUserIdIndexImport.update({
  id: '/u/$userId/',
  path: '/u/$userId/',
  getParentRoute: () => rootRoute,
} as any)

const TTopicIdIndexRoute = TTopicIdIndexImport.update({
  id: '/t/$topicId/',
  path: '/t/$topicId/',
  getParentRoute: () => rootRoute,
} as any)

const PmIssueIdIndexRoute = PmIssueIdIndexImport.update({
  id: '/pm/$issueId/',
  path: '/pm/$issueId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/chat/$chatId': {
      id: '/chat/$chatId'
      path: '/chat/$chatId'
      fullPath: '/chat/$chatId'
      preLoaderRoute: typeof ChatChatIdImport
      parentRoute: typeof rootRoute
    }
    '/c/': {
      id: '/c/'
      path: '/c'
      fullPath: '/c'
      preLoaderRoute: typeof CIndexImport
      parentRoute: typeof rootRoute
    }
    '/r/': {
      id: '/r/'
      path: '/r'
      fullPath: '/r'
      preLoaderRoute: typeof RIndexImport
      parentRoute: typeof rootRoute
    }
    '/s/': {
      id: '/s/'
      path: '/s'
      fullPath: '/s'
      preLoaderRoute: typeof SIndexImport
      parentRoute: typeof rootRoute
    }
    '/pm/$issueId/': {
      id: '/pm/$issueId/'
      path: '/pm/$issueId'
      fullPath: '/pm/$issueId'
      preLoaderRoute: typeof PmIssueIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/t/$topicId/': {
      id: '/t/$topicId/'
      path: '/t/$topicId'
      fullPath: '/t/$topicId'
      preLoaderRoute: typeof TTopicIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/u/$userId/': {
      id: '/u/$userId/'
      path: '/u/$userId'
      fullPath: '/u/$userId'
      preLoaderRoute: typeof UUserIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/chat/$chatId': typeof ChatChatIdRoute
  '/c': typeof CIndexRoute
  '/r': typeof RIndexRoute
  '/s': typeof SIndexRoute
  '/pm/$issueId': typeof PmIssueIdIndexRoute
  '/t/$topicId': typeof TTopicIdIndexRoute
  '/u/$userId': typeof UUserIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/chat/$chatId': typeof ChatChatIdRoute
  '/c': typeof CIndexRoute
  '/r': typeof RIndexRoute
  '/s': typeof SIndexRoute
  '/pm/$issueId': typeof PmIssueIdIndexRoute
  '/t/$topicId': typeof TTopicIdIndexRoute
  '/u/$userId': typeof UUserIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/chat/$chatId': typeof ChatChatIdRoute
  '/c/': typeof CIndexRoute
  '/r/': typeof RIndexRoute
  '/s/': typeof SIndexRoute
  '/pm/$issueId/': typeof PmIssueIdIndexRoute
  '/t/$topicId/': typeof TTopicIdIndexRoute
  '/u/$userId/': typeof UUserIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/chat/$chatId'
    | '/c'
    | '/r'
    | '/s'
    | '/pm/$issueId'
    | '/t/$topicId'
    | '/u/$userId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/chat/$chatId'
    | '/c'
    | '/r'
    | '/s'
    | '/pm/$issueId'
    | '/t/$topicId'
    | '/u/$userId'
  id:
    | '__root__'
    | '/'
    | '/chat/$chatId'
    | '/c/'
    | '/r/'
    | '/s/'
    | '/pm/$issueId/'
    | '/t/$topicId/'
    | '/u/$userId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChatChatIdRoute: typeof ChatChatIdRoute
  CIndexRoute: typeof CIndexRoute
  RIndexRoute: typeof RIndexRoute
  SIndexRoute: typeof SIndexRoute
  PmIssueIdIndexRoute: typeof PmIssueIdIndexRoute
  TTopicIdIndexRoute: typeof TTopicIdIndexRoute
  UUserIdIndexRoute: typeof UUserIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChatChatIdRoute: ChatChatIdRoute,
  CIndexRoute: CIndexRoute,
  RIndexRoute: RIndexRoute,
  SIndexRoute: SIndexRoute,
  PmIssueIdIndexRoute: PmIssueIdIndexRoute,
  TTopicIdIndexRoute: TTopicIdIndexRoute,
  UUserIdIndexRoute: UUserIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/chat/$chatId",
        "/c/",
        "/r/",
        "/s/",
        "/pm/$issueId/",
        "/t/$topicId/",
        "/u/$userId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/chat/$chatId": {
      "filePath": "chat/$chatId.tsx"
    },
    "/c/": {
      "filePath": "c/index.tsx"
    },
    "/r/": {
      "filePath": "r/index.tsx"
    },
    "/s/": {
      "filePath": "s/index.tsx"
    },
    "/pm/$issueId/": {
      "filePath": "pm/$issueId/index.tsx"
    },
    "/t/$topicId/": {
      "filePath": "t/$topicId/index.tsx"
    },
    "/u/$userId/": {
      "filePath": "u/$userId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
